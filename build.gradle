plugins {
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.vanniktech.maven.publish' version '0.34.0'
    id 'net.researchgate.release' version '3.1.0'
}

import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

group = 'com.digitalsanctuary.springuser'
// version = '3.0.0-SNAPSHOT'
description = 'Spring User Framework'

ext {
    springBootVersion = '3.5.3'
    lombokVersion = '1.18.38'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
	mavenCentral()
}

dependencies {
    // Spring Boot starters
    compileOnly 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.springframework.boot:spring-boot-starter-jdbc'
    compileOnly 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.springframework.boot:spring-boot-starter-oauth2-client'
    compileOnly 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compileOnly 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'
    compileOnly 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.4.0'

    // Other dependencies
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.5.4'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.passay:passay:1.6.6'
    implementation 'com.google.guava:guava:33.4.8-jre'
    compileOnly 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'jakarta.validation:jakarta.validation-api:3.1.1'

    // Lombok dependencies
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Lombok dependencies for test classes
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

     // Test dependencies
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-mail'
    testImplementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2:2.3.232'
    
    // Additional test dependencies for improved testing
    testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:mariadb:1.19.3'
    testImplementation 'com.github.tomakehurst:wiremock:3.0.1'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
    testImplementation 'com.icegreen:greenmail:2.0.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

tasks.named('bootJar') {
    enabled = false
}

test {
	useJUnitPlatform()
	  testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "full"
        showStandardStreams true
    }
}

tasks.named('jar') {
    enabled = true
    archiveBaseName.set('ds-spring-ai-client')
    archiveClassifier.set('')
}

def registerJdkTestTask(name, jdkVersion) {
    tasks.register(name, Test) {
        javaLauncher.set(javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(jdkVersion)
        })
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath
        useJUnitPlatform()
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
        doFirst {
            println("Running tests with JDK $jdkVersion")
        }
    }
}

registerJdkTestTask('testJdk17', 17)
registerJdkTestTask('testJdk21', 21)


// Task that runs both test tasks
tasks.register('testAll') {
    dependsOn(tasks.named('testJdk17'), tasks.named('testJdk21'))
    doFirst {
        println("Running tests with both JDK 17 and JDK 21")
    }
}

// Make the default 'test' task depend on 'testAll'
tasks.test {
    dependsOn(tasks.named('testAll'))
       doFirst {
        println("Delegating to 'testAll'")
    }
    // Prevent the default test behavior
    testClassesDirs = files()
    classpath = files()
}


// Maven Central Publishing Tasks
mavenPublishing {
  configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
  // publishToMavenCentral() is now configured via gradle.properties
  signAllPublications()
  coordinates("com.digitalsanctuary", "ds-spring-user-framework", project.version)

  pom {
    name = "DS Spring User Framework"
    description = "Simple SpringBoot User Library built on top of Spring Security."
    inceptionYear = "2024"
    url = "https://github.com/devondragon/SpringUserFramework"
    licenses {
      license {
        name = "The Apache License, Version 2.0"
        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
      }
    }
    developers {
      developer {
        id = "devondragon"
        name = "Devon Hillard"
        url = "https://github.com/devondragon/"
      }
    }
    scm {
      url = "https://github.com/devondragon/SpringUserFramework"
      connection = "scm:git:git@github.com:devondragon/SpringUserFramework.git"
      developerConnection = "scm:git:ssh://git@github.com:devondragon/SpringUserFramework.git"
    }
  }
}

tasks.named("publishMavenPublicationToMavenCentralRepository") {
    dependsOn("signMavenPublication")
}

publishing {
    repositories {
        maven {
            name = 'reposiliteRepository'
            url = uri('https://reposilite.tr0n.io/private')
            credentials(PasswordCredentials)
            authentication {
                 basic(BasicAuthentication)
            }
        }
        // more repositories can go here
    }
}

// Maven Publishing Aliases

tasks.register("publishReposilite") {
    dependsOn("publishMavenPublicationToReposiliteRepository")
}

tasks.register("publishMavenCentral") {
    dependsOn("publishAndReleaseToMavenCentral")
}

tasks.register("publishLocal") {
    dependsOn("publishToMavenLocal")
}

task generateAIChangelog(type: Exec) {
    def newVersion = project.version
    commandLine 'mise', 'x', '--', 'python', 'generate_changelog.py', newVersion
}

release {
    beforeReleaseBuild.dependsOn generateAIChangelog
    // afterReleaseBuild.dependsOn publishReposilite
    afterReleaseBuild.dependsOn publishMavenCentral
}
