
# Enable Spring Data JPA repository scanning
spring.data.jpa.repositories.enabled=true
spring.data.jpa.repositories.packages=com.digitalsanctuary.spring.user.persistence.repository

# Enable JPA entity scanning
spring.jpa.entity.packages=com.digitalsanctuary.spring.user.persistence.model


# Spring Configuration Overrides
spring.messages.basename=messages/messages,messages/dsspringusermessages

# DigitalSanctuary Spring User Configuration

# User Audit Log Configuration

# The path to the audit log file. Defaults to ./logs/user-audit.log (relative to application directory).
# If this path is not writable, the system will automatically fall back to using the system temp directory.
user.audit.logFilePath=./logs/user-audit.log

# If true, the audit log will be flushed to disk after every write (less performant).  If false, the audit log will be flushed to disk every 10 seconds (more performant).
user.audit.flushOnWrite=false

# The rate at which the audit log will be flushed to disk in milliseconds.
user.audit.flushRate=30000

# If true, all events will be logged.
user.audit.logEvents=true


# If true, users can delete their own accounts.  If false, accounts are disabled instead of deleted.
user.actuallyDeleteAccount=false

# If true, a verification email will be sent to the user after registration.  If false, the user will be automatically verified.
user.registration.sendVerificationEmail=true
# If true, Google OAuth2 will be enabled for registration.
user.registration.googleEnabled=false

# If true, Facebook OAuth2 will be enabled for registration.
user.registration.facebookEnabled=false

# If true, Keycloak OAuth2 will be enabled for registration.
user.registration.keycloakEnabled=false


# The number of failed login attempts before the user account is locked out.  Set this to 0 to disable account lockout.
user.security.failedLoginAttempts=10
# The number of minutes to lock the user account after the maximum number of failed login attempts is reached.  Set this to 0 to disable account lockout.  Set this to -1 to lock the account until an administrator unlocks it.
user.security.accountLockoutDuration=30
# The bcrypt strength to use for password hashing.  The higher the number, the longer it takes to hash the password.  The default is 12.  The minimum is 4.  The maximum is 31.
user.security.bcryptStrength=12
# If true, the test hash time will be logged to the console on startup.  This is useful for determining the optimal bcryptStrength value.
user.security.testHashTime=true
# The default action for all requests.  This can be either deny or allow.
user.security.defaultAction=deny
# A comma delimited list of URIs that should not be protected by Spring Security if the defaultAction is deny.
user.security.unprotectedURIs=/,/index.html,/favicon.ico,/css/*,/js/*,/img/*,/user/registration,/user/resendRegistrationToken,/user/resetPassword,/user/registrationConfirm,/user/changePassword,/user/savePassword,/oauth2/authorization/*,/login,/error
# A comma delimited list of URIs that should be protected by Spring Security if the defaultAction is allow.
user.security.protectedURIs=/protected.html
# A comma delimited list of URIs that should not be protected by CSRF protection. This may include API endpoints that need to be called without a CSRF token.
user.security.disableCSRFURIs=/no-csrf-test

# The URI for the login page.
user.security.loginPageURI=/user/login.html
# The URI for the login action.
user.security.loginActionURI=/user/login
# The URI for the login success page.
user.security.loginSuccessURI=/index.html?messageKey=message.login.success
# Whether to always redirect to loginSuccessURI or use saved requests (default: false for better UX)
user.security.alwaysUseDefaultTargetUrl=false
# The URI for the logout success page.
user.security.logoutSuccessURI=/index.html?messageKey=message.logout.success
# The URI for the logout action.
user.security.logoutActionURI=/user/logout
# The URI for the forgot password change page.
user.security.forgotPasswordChangeURI=/user/forgot-password-change.html
# The URI for the forgot password page.
user.security.forgotPasswordURI=/user/forgot-password.html
# The URI for the forgot password pending verification page.
user.security.forgotPasswordPendingURI=/user/forgot-password-pending-verification.html
# The URI for the registration pending verification page.
user.security.registrationPendingURI=/user/registration-pending-verification.html
# The URI for the registration page.
user.security.registrationURI=/user/register.html
# The URI for the registration success page.
user.security.registrationSuccessURI=/user/registration-complete.html
# The URI for the request new verification email page.
user.security.registrationNewVerificationURI=/user/request-new-verification-email.html
# The URI for the update user page.
user.security.updateUserURI=/user/update-user.html
# The URI for the update password page.
user.security.updatePasswordURI=/user/update-password.html
# The URI for the delete account page.
user.security.deleteAccountURI=/user/delete-account.html
# The URI for the change password page.
user.security.changePasswordURI=/user/changePassword
# The URI for the registration confirm page.
user.security.registrationConfirmURI=/user/registrationConfirm
# Enable/disable password policy enforcement
user.security.password.enabled=true
# Minimum password length
user.security.password.min-length=8
# Maximum password length
user.security.password.max-length=128
# Require at least one uppercase character
user.security.password.require-uppercase=true
# Require at least one lowercase character
user.security.password.require-lowercase=true
# Require at least one digit
user.security.password.require-digit=true
# Require at least one special character
user.security.password.require-special=true
# Allowed special characters
user.security.password.special-chars="~`!@#$%^&*()_-+={}[]|\\:;\"'<>,.?/"
# Prevent use of common passwords (dictionary check)
user.security.password.prevent-common-passwords=true
# Number of previous passwords to prevent reuse
user.security.password.history-count=3
# Percentage of similarity allowed with username/email
user.security.password.similarity-threshold=70

# The from address for all emails sent by the application.
user.mail.fromAddress=test@test.com
# The cron expression for the token purge job.  This defaults to 3 am every day.
user.purgetokens.cron.expression=0 0 3 * * ?
# The first year of the copyright. This is used for dispaly of the page footer.
user.copyrightFirstYear=2020

# Global User Model Injection Configuration
# 
# This controls whether the current user object is automatically added to MVC view models.
# 
# globalUserModelOptIn=true (Global Opt-In Mode):
#   - User object is automatically added to ALL MVC views by default
#   - Use @ExcludeUserFromModel annotation to skip specific controllers/methods
#   - Good for traditional MVC applications where most views need user data
#
# globalUserModelOptIn=false (Global Opt-Out Mode): 
#   - User object is NOT added to any views by default
#   - Use @IncludeUserInModel annotation to add user to specific controllers/methods
#   - Good for REST-only applications or when you want minimal overhead
#
# Default: false (opt-out mode) - suitable for REST-only applications
user.web.globalUserModelOptIn=false

# Roles and privileges configuration.
# Each role can have one or more privileges. Privileges are comma delimited.
user.roles.roles-and-privileges.ROLE_ADMIN=ADMIN_PRIVILEGE,INVITE_USER_PRIVILEGE,READ_USER_PRIVILEGE,ASSIGN_MANAGER_PRIVILEGE,RESET_ANY_USER_PASSWORD_PRIVILEGE
user.roles.roles-and-privileges.ROLE_MANAGER=ADD_USER_TO_TEAM_PRIVILEGE,REMOVE_USER_FROM_TEAM_PRIVILEGE,RESET_TEAM_PASSWORD_PRIVILEGE
user.roles.roles-and-privileges.ROLE_USER=LOGIN_PRIVILEGE,UPDATE_OWN_USER_PRIVILEGE,RESET_OWN_PASSWORD_PRIVILEGE

# Role hierarchy configuration. Higher level roles inherit all roles from lower level roles.
user.roles.role-hierarchy[0]=ROLE_ADMIN > ROLE_MANAGER
user.roles.role-hierarchy[1]=ROLE_MANAGER > ROLE_USER
